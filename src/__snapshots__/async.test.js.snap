// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Adds expect.assertions when expect.hasAssertions is supplied 1`] = `
"
describe('.add', () => {
  it('resolves 1', async () => {
    expect.hasAssertions();
    try {
      const value = await Promise.resolve(1);
      expect(value).toBe(1);
    } catch (e) {
      expect(true).toBe(false);
    }
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('resolves 1', async () => {
    expect.assertions(2);

    expect.hasAssertions();
    try {
      const value = await Promise.resolve(1);
      expect(value).toBe(1);
    } catch (e) {
      expect(true).toBe(false);
    }
  });
});
"
`;

exports[`Adds number of assertions and has assertions check when given multiple expect statement in try/catch when awaiting 1`] = `
"
describe('.add', () => {
  it('resolves 1', async () => {
    try {
      const value = await Promise.resolve(1);
      expect(value).toBe(1);
    } catch (e) {
      expect(true).toBe(false);
    }
  });

  it('rejects 1', async () => {
    try {
      const value = await Promise.reject(1);
      expect(true).toBe(false);
    } catch (e) {
      expect(value).toBe(1);
    }
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('resolves 1', async () => {
    expect.assertions(2);
    expect.hasAssertions();

    try {
      const value = await Promise.resolve(1);
      expect(value).toBe(1);
    } catch (e) {
      expect(true).toBe(false);
    }
  });

  it('rejects 1', async () => {
    expect.assertions(2);
    expect.hasAssertions();

    try {
      const value = await Promise.reject(1);
      expect(true).toBe(false);
    } catch (e) {
      expect(value).toBe(1);
    }
  });
});
"
`;

exports[`Adds number of assertions and has assertions check when given one expect statement in catch 1`] = `
"
describe('.add', () => {
  it('rejects 1', async () => {
    Promise.reject(1).catch(value => expect(value).toBe(1));
  });

  it('rejects 1', async () => {
    Promise.reject(1).catch(value => {
      expect(value).toBe(1)
    });
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('rejects 1', async () => {
    expect.assertions(1);
    expect.hasAssertions();

    Promise.reject(1).catch(value => expect(value).toBe(1));
  });

  it('rejects 1', async () => {
    expect.assertions(1);
    expect.hasAssertions();

    Promise.reject(1).catch(value => {
      expect(value).toBe(1);
    });
  });
});
"
`;

exports[`Adds number of assertions and has assertions check when given one expect statement in then 1`] = `
"
describe('.add', () => {
  it('resolves 1', async () => {
    Promise.resolve(1).then(value => expect(value).toBe(1));
  });

  it('resolves 1', async () => {
    Promise.resolve(1).then(value => {
      expect(value).toBe(1)
    });
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('resolves 1', async () => {
    expect.assertions(1);
    expect.hasAssertions();

    Promise.resolve(1).then(value => expect(value).toBe(1));
  });

  it('resolves 1', async () => {
    expect.assertions(1);
    expect.hasAssertions();

    Promise.resolve(1).then(value => {
      expect(value).toBe(1);
    });
  });
});
"
`;

exports[`Does not add expect.assertions when expect.assertions is supplied 1`] = `
"
describe('.add', () => {
  it('resolves 1', async () => {
    expect.assertions(1);
    try {
      const value = await Promise.resolve(1);
      expect(value).toBe(1);
    } catch (e) {
      expect(true).toBe(false);
    }
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('resolves 1', async () => {
    expect.hasAssertions();

    expect.assertions(1);
    try {
      const value = await Promise.resolve(1);
      expect(value).toBe(1);
    } catch (e) {
      expect(true).toBe(false);
    }
  });
});
"
`;

exports[`Does not add expect.assertions when no assertions are supplied 1`] = `
"
describe('.add', () => {
  it('resolves 1', async () => {
    try {
      const value = await Promise.resolve(1);
      console.log(value);
    } catch (e) {
      console.log(e);
    }
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('resolves 1', async () => {
    expect.hasAssertions();

    try {
      const value = await Promise.resolve(1);
      console.log(value);
    } catch (e) {
      console.log(e);
    }
  });
});
"
`;

exports[`Does not count commented out expect statements 1`] = `
"
describe('.add', () => {
  it('resolves 1', async () => {
    // expect(add(1, 2)).toEqual(3);
    try {
      /*
        expect(add(4, 5).toEqual(9));
      */
      const value = await Promise.resolve(add(0, 1));

      const a = 1; // expect(a).toEqual(1);
      const b = 2; /* expect(b).toEqual(2); */

      expect(value).toEqual(1);
      // expect(value).toEqual(2);
    } catch (err) {
      /*
        expect(add(6, 1).toEqual(7));
        */
    }
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('resolves 1', async () => {
    expect.assertions(1);
    expect.hasAssertions();

    // expect(add(1, 2)).toEqual(3);
    try {
      /*
        expect(add(4, 5).toEqual(9));
      */
      const value = await Promise.resolve(add(0, 1));

      const a = 1; // expect(a).toEqual(1);
      const b = 2; /* expect(b).toEqual(2); */

      expect(value).toEqual(1);
      // expect(value).toEqual(2);
    } catch (err) {
      /*
        expect(add(6, 1).toEqual(7));
        */
    }
  });
});
"
`;
