// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Adds expect.assertions when expect.hasAssertions is supplied 1`] = `
"
describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.hasAssertions();
    expect(add(0, 1)).toEqual(1);
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.assertions(1);

    expect.hasAssertions();
    expect(add(0, 1)).toEqual(1);
  });
});
"
`;

exports[`Adds number of assertions and has assertions check when given one expect statement 1`] = `
"
describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect(add(0, 1)).toEqual(1);
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.assertions(1);
    expect.hasAssertions();

    expect(add(0, 1)).toEqual(1);
  });
});
"
`;

exports[`Adds total number of assertions when given multiple expect statements 1`] = `
"
describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect(add(0, 1)).toEqual(1);
    expect(add(1, 0)).toEqual(1);
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.assertions(2);
    expect.hasAssertions();

    expect(add(0, 1)).toEqual(1);
    expect(add(1, 0)).toEqual(1);
  });
});
"
`;

exports[`Adds total number of assertions when given multiple expect statements in nested if scope 1`] = `
"
describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    if (true) {
      expect(add(0, 1)).toEqual(1);
    } else if (false) {
      expect(add(1, 0)).toEqual(1);
    }
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.assertions(2);
    expect.hasAssertions();

    if (true) {
      expect(add(0, 1)).toEqual(1);
    } else if (false) {
      expect(add(1, 0)).toEqual(1);
    }
  });
});
"
`;

exports[`Does not add expect.assertions when expect.assertions is supplied 1`] = `
"
describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.assertions(1);
    expect(add(0, 1)).toEqual(1);
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.hasAssertions();

    expect.assertions(1);
    expect(add(0, 1)).toEqual(1);
  });
});
"
`;

exports[`Does not count commented out expect statements 1`] = `
"
describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    // expect(add(1, 2)).toEqual(3);
    expect(add(0, 1)).toEqual(1);

    /*
      expect(add(4, 5).toEqual(9));
    */

    const a = 1; // expect(a).toEqual(1);
    const b = 2; /* expect(b).toEqual(2); */
    
    expect(add(1, 0)).toEqual(1);
    /*
      expect(add(6, 1).toEqual(7));
      */
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('.add', () => {
  it('returns 1 when given 0 and 1', () => {
    expect.assertions(2);
    expect.hasAssertions();

    // expect(add(1, 2)).toEqual(3);
    expect(add(0, 1)).toEqual(1);

    /*
      expect(add(4, 5).toEqual(9));
    */

    const a = 1; // expect(a).toEqual(1);
    const b = 2; /* expect(b).toEqual(2); */

    expect(add(1, 0)).toEqual(1);
    /*
      expect(add(6, 1).toEqual(7));
      */
  });
});
"
`;
